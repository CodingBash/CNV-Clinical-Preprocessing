Produce BED file from formatted data frame:

write.table(inputCOREintervals, sep = "\t", quote = FALSE, col.names = FALSE, row.names = FALSE, file = "inputCOREintervalsDELETIONS.bed", )


Read $coreTable CSV into df

df <- read.table("AcoreTableBP.csv", header = TRUE, sep = ",")

Convert $coreTable CSV into BED formatted data frame, then save

df <- df[,c(2,3,4)]
write.table(df, sep = "\t", quote = FALSE, col.names = FALSE, row.names = FALSE, file = "AcoresBP.bed")

GET THE CORE ALGORITHM INPUT IN BED FORMAT

head(inputCORE)
inputCOREintervals <- cbind(inputCORE)
inputCOREintervals$chrom <- paste("chr", inputCOREintervals$chrom, sep = "")
write.table(inputCOREintervals, sep = "\t", quote = FALSE, col.names = FALSE, row.names = FALSE, file = "inputCOREintervals.hT.amp.bed", )

# Get cores that with a certain p-val limit
Aobj <- readRDS("C:/Users/bbece/Documents/Git-Projects/Git-Research-Projects/drug-response-prediction/hN_results/coresResults/AnewCOREobj.rds")

coreTable <- read.table("AcoreTableBP.csv", header = TRUE, sep = ",")
coreTable <- coreTable[which(Aobj$p<0.002),]
coreTable <- coreTable[,c(2,3,4)] # Now convert to BED format
write.table(coreTable, sep = "\t", quote = FALSE, col.names = FALSE, row.names = FALSE, file = "AcoresBP.bed")


# Remove artifacts from hT cores with fractional subtraction
subtractBed -a AcoresBP.bed -b ../../../hN_results/coresResults/prev_run_7_3_2018/AcoresBP.bed -A -f 0.5 > ../AfinalCoresBP_subtractFraction.bed

#Run segment clustering qsub
qsub -N produceSegtable15 -v output_dir='prev_run_7_15_2018_14' -v mclust_model='E' -v minjoin='0.25' -v ntrial='40' -v description='Running with E model with default minjoin and high ntrial to see if we can capture small clusters' runSegmentClustering.sh


